library("plspm")
help(plspm)
data("gasoline")
install.packages("pls")
library("pls")
data("gasoline")
gasTrain <- gasoline[1:50, ]
gasTest <- gasoline[51:60, ]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
ummary(gas1)
summary(gas1)
plot(RMSEP(gas1), legendpos = "topright")
plot(gas1, ncomp = 2, asp = 1, line = TRUE)
plot(gas1, plottype = "scores", comps = 1:3)
explvar(gas1)
plot(gas1, "loadings", comps = 1:2, legendpos = "topleft",
+ labels = "numbers", xlab = "nm")
plot(gas1, "loadings", comps = 1:2, legendpos = "topleft", labels = "numbers", xlab = "nm")
abline(h = 0)
predict(gas1, ncomp = 2, newdata = gasTest)
RMSEP(gas1, newdata = gasTest)
dat <- as.matrix(iris[,-5])
s <- svd(dat)
plot(cumsum(s$d^2/sum(s$d^2))) # % explained variance
arquality
airquality
data <- read.csv("communities.csv", header=TRUE, sep=',', quote = '"')
View(data)
summary(data)
data <- read.csv("communities.csv", sep=',', quote = '"')
View(data)
summary(data)
gasoline
data("gasoline")
library("pls")
data("gasoline")
gasoline
View(gasoline)
library('RegressionLibs')
#Example 1
iris.x <- iris[,1:4] # These are the independent variables
Species <- iris[,5] # This is the dependent variable
ScatterplotMatrix(iris.x, c(2:4), Species, "Species")
data <- read.csv("communities.csv", sep=',', quote = '"')
View(data)
data <- read.csv("communities.csv", header=TRUE, sep=',', quote = '"')
View(data)
iris.x <- iris[,1:4] # These are the independent variables
Species <- iris[,5] # This is the dependent variable
# 3D Plot of 3 first columns of data set
Plot3D(iris.x, c(1,2,3), Species)
iris.x <- iris[,1:4] # These are the independent variables
Species <- iris[,5] # This is the dependent variable
# A ParallelPlot of all rows and all columns
ParallelPlot(iris.x, seq(1,nrow(iris.x),1), seq(1,ncol(iris.x),1), Species, "Species", 1, 0.5, TRUE)
iris.x <- iris[,1:4] # These are the independent variables
# We know that there are no missing values in the data set
# performing prcomp
ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)
# Generating elbow plot to detect the most important principal components
elbowPlot(ir.pca)
install.packages('DAAG')
library(DAAG)
install.packages('lattice')
install.packages("lattice")
library(DAAG)
library(plyr)
library(randomForest)
install.packages('randomForest')
library(randomForest)
setwd("~/GitHub/Shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
