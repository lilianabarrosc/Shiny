#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
page <- fluidPage(
fluidRow(
#BreadCrumds
column(12,
#archivo que contiene el html de la p치gina home
includeHTML("breadcrumbs.html"),
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
)
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
/* logo */
.nav-tabs-custom>.nav-tabs>li.active {
border-top-color: #f39c12;
})')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalizaci칩n de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
page <- fluidPage(
fluidRow(
#BreadCrumds
column(12,
#archivo que contiene el html de la p치gina home
HTML('
<ul class="breadcrumb">
<li>Analysis</li>
<li>Visualization</li>
</ul>'),
# includeHTML("breadcrumbs.html"),
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
)
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
/* logo */
.nav-tabs-custom>.nav-tabs>li.active {
border-top-color: #f39c12;
})')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalizaci칩n de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
}
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
setwd("~/GitHub/Shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fit <- lm(y ~ x1 + x2 + x3, data=mydata)
iris
str(iris)
fit <- lm(Species ~ ., data=iris)
fit <- lm(Petal.Length ~ ., data=iris)
summary(fit)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dim(iris)
shiny::runApp()
list <- uno + i
list <- 'uno' + i
list <- 'uno' + 1
list <- 'uno + 1'
list
list <- paste('uno', 1, sep=" ")
list
list <- paste('uno', 1, sep=" + ")
list
c <- uno
c <- 'uno'
c <- 'uno', 'dos'
c <- c('uno')
c <- c(c, 'dos')
c
library('shiny')
library('shinydashboard')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
page <- fluidPage(
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
/* color de slider
.irs-bar {
height: 8px;
top: 25px;
border-top: 1px solid #E08E0B;
border-bottom: 1px solid #E08E0B;
background: #E08E0B;
}
)')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalizaci칩n de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris[2])
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
dim(iris[2])
dim(iris)[2]
library('shiny')
library('shinydashboard')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
page <- fluidPage(
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
/* color de slider
.irs-bar {
height: 8px;
top: 25px;
border-top: 1px solid #E08E0B;
border-bottom: 1px solid #E08E0B;
background: #E08E0B;
}
)')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalizaci칩n de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
fit <- lm('Ozone'~ ., data=airquality)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
xnam <- paste0("x", 1:25)
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
