ui <- dashboardPage(
dashboardHeader(title = "login"
),
dashboardSidebar(sidebarMenuOutput("side")),
dashboardBody(
#ventana emergente
#     actionButton("go", "Login"),
#     bsModal("modalExample", "Your plot", "go", size = "large"),
tabItems(
uiOutput("page"),
#Tab del home
tabItem(tabName = "home",
tabBox(
title = "Login",
width = 6)
)
)
)
)
server <- function(input, output, session) {
USER <- reactiveValues(Logged = FALSE,role=NULL)
ui1 <- function(){
#     tagList(
#       div(id = "login",
tabBox(
title = "Login",
width = 6,
# id = "tabset",
tabPanel("login",
bsAlert("alert1"),
textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login","Log in")
),
tabPanel("Register",
bsAlert("alert2"),
textInput("newUserName", "Username"),
textInput("email", "Email Address"),
passwordInput("newPasswd", "Password"),
passwordInput("confirmPasswd", "Confirm Password"),
br(),submitButton("Register Now")
)
#           wellPanel(textInput("userName", "Username"),
#                     passwordInput("passwd", "Password"),
#                     br(),actionButton("Login", "Log in"))
)
#,tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -10px;margin-left: -150px;}")
#  )
}
ui2 <- function(){list(tabPanel("Test",get_ui(USER$role)[2:3]),get_ui(USER$role)[[1]])}
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$role=get_role(Username)
closeAlert(session, "examplelert")
}
}else {
createAlert(session, "alert1", "exampleAlert1", title = "Oops",
content = "username and password do not match.",
style = "warning", append = FALSE)
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
#box(
#div(class="outer",do.call(bootstrapPage,c("",ui1()))))
ui1()
})
output$side <- renderMenu({
sidebarMenu(
menuItem("Menu item", icon = icon("calendar"), tabName = "home")
)
})
}
if (USER$Logged == TRUE)    {
output$page <- renderUI({
box(width = 12,
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
)})
#print(ui)
output$side <- renderMenu({
sidebar()
})
activeHeader <- FALSE
}
})
observe({
if(!is.null(input$newUserName)){
if(input$newUserName == ""){
createAlert(session, "alert2", "exampleAlert2", title = "Oops",
content = "campo nulo.", append = FALSE)
}else {
closeAlert(session, "exampleAlert2")
}
}
#     validate(
#       need(is.null(input$newUserName), "Please enter username"),
#       need(input$newPasswd !="" , "Please enter name")
#     )
# get(input$newUserName)
})
}
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
library('ggplot')
old.packages()
RSiteSearch('neural networks')
update.packages()
(34 + 90)/12.5
ls()
rm(y)
y <- 43
ls()
rm(y)
rm(z,w,i)
rm(y)
y <- 43
y
z <- 5
w <- z^2
w
i <- (z*2 + 45)/2
i
ls()
rm(y)
rm(z,w,i)
ls() #muestra las variables
v <- c(4,7,23.5,76.2,80)
v
length(v)
mode(v)
g <- c('f','m','m','m','f','m','f','m','f','f')
g
g <- factor(g)
g
v <- c(4,7,23.5,76.2,80)
v
length(v)
mode(v) #tipo de variable
v <- c(4,7,23.5,76.2,80,"rrt")
v
mode(v)
u <- c(4,6,NA,2)
u
v[1] <- 'hello'
v
x[3] <- 45
x <- vector()
x[3] <- 45
x
length(x)
x[10]
x[5] <- 4
x
v <- c(45,243,78,343,445,44,56,77)
v
v <- c(v[5],v[7])
v <- c(4,7,23.5,76.2,80)
x <- sqrt(v)
x
v1 <- c(4,6,87)
v2 <- c(34,32.4,12)
v1+v2
v1 <- c(4,6,8,24)
v2 <- c(10,2)
v1+v2
2*v1
g <- c('f','m','m','m','f','m','f','m','f','f')
g
g <- factor(g)
g
other.g <- factor(c('m','m','m','m','m'),levels=c('f','m'))
other.g
table(g)
table(other.g)
a <- factor(c('adult','adult','juvenile','juvenile','adult','adult',
'adult','juvenile','adult','juvenile'))
t <- table(a,g)
a
t
margin.table(t,1)
margin.table(t,2)
prop.table(t,1)
prop.table(t,2)
m <- matrix(1:4, 2)
m
prop.table(m, 1)
prop.table(t)
x <- 1:1000
x
10:15-1
10:(15-1)
5:0
seq(-4,1,0.5)
1,2,3,4
a <- 1,2,3,4
seq(from=1,to=5,length=4)
seq(length=10,from=-2,by=.2)
seq(from=1,to=5,length=2)
rep(5,10)
rep('hi',3)
rep(1:2,3)
rep(1:2,each=3)
gl(3,5)
gl(3,5)
gl(2,5,labels=c('female','male'))
rnorm(10)
rnorm(4,mean=10,sd=3)
rnorm(4,mean=10,sd=3) #valores con media = 10 y desviacion estándar = 3
rt(5,df=10)
x <- c(0,-3,4,-1,45,90,-5)
x > 0
x[x>0]
x
x[c(4,6)]
x[1:3]
x
y <- c(1,4)
y
x[y]
x[-1]
x
pH <- c(4.5,7,7.3,8.2,6.3)
names(pH) <- c('area1','area2','mud','dam','middle')
pH
pH <- c(area1=4.5,area2=7,mud=7.3,dam=8.2,middle=6.3)
pH
pH['mud']
pH[c('area1','dam')]
m <- c(45,23,66,77,33,44,56,12,78,23)
m
dim(m) <- c(2,5)
m
m <- matrix(c(45,23,66,77,33,44,56,12,78,23),2,5)
m
m <- matrix(c(45,23,66,77,33,44,56,12,78,23),2,5,byrow=T)
m
dim(m)
m[2,3]
m[1,]
m[,4]
m[1,,drop=F]
m[,4,drop=F]
results <- matrix(c(10,30,40,50,43,56,21,30),2,4,byrow=T)
colnames(results) <- c('1qrt','2qrt','3qrt','4qrt')
rownames(results) <- c('store1','store2')
results
results['store1',]
a <- array(1:24,dim=c(4,3,2))
a
a[1,3,2]
a[1,,2]
a[4,3,]
my.lst <- list(stud.id=34453,
stud.name="John",
stud.marks=c(14.3,12,15,19))
my.lst
my.lst[[1]]
my.lst[[3]]
my.lst[1]
mode(my.lst[1])
mode(my.lst[[1]])
names(my.lst)
names(my.lst) <- c('id','name','marks')
my.lst
my.lst$parents.names <- c("Ana","Mike")
my.lst
length(my.lst)
other <- list(age=19,sex='male')
lst <- c(my.lst,other)
lst
unlist(my.lst)
my.dataset <- data.frame(site=c('A','B','A','A','B'),
season=c('Winter','Summer','Summer','Spring','Fall'),
pH = c(7.4,6.3,8.6,7.2,8.9))
my.dataset[3,2]
View(my.dataset)
View(my.dataset)
my.dataset$pH
my.dataset[my.dataset$pH > 7,]
my.dataset[my.dataset$site == 'A','pH']
attach(my.dataset)
my.dataset[site == 'B',]
my.dataset[site == 'B',]
season
subset(my.dataset,pH > 8)
subset(my.dataset,season == 'Summer',season:pH)
my.dataset[my.dataset$season == 'Summer','pH'] <-
my.dataset[my.dataset$season == 'Summer','pH'] + 1
my.dataset$NO3 <- c(234.5,256.6,654.1,356.7,776.4)
my.dataset
names(my.dataset) #nombre
names(my.dataset) <- c("area","season","pH","NO3" )
my.dataset
names(my.dataset)[4] <- "PO4"
my.dataset
RSiteSearch('neural networks')
x <- 945
x <- 945
x
y <- 39
y
y <- 43
y
z <- 5
w <- z^2
w
(34 + 90)/12.5
ls() #muestra las variables
rm(y) #borra las variables
ls() #muestra las variables
v <- c(4,7,23.5,76.2,80)
v
length(v)
mode(v) #tipo de variable
v <- c(4,7,23.5,76.2,80,"rrt")
v
mode(v) #tipo de variable
v[2]
k <- c(T,F,NA,TRUE)
k
v[1] <- 'hello'
v
x <- vector()
x[3] <- 45
x
length(x)
x[10]
v <- c(45,243,78,343,445,44,56,77)
v
v <- c(v[5],v[7]) #la pos de los vectores comienza en 1
v
v <- c(4,7,23.5,76.2,80)
x <- sqrt(v)
x
v1 <- c(4,6,87)
v2 <- c(34,32.4,12)
v1+v2
v1 <- c(4,6,8,24)
v2 <- c(10,2)
v1+v2
g <- c('f','m','m','m','f','m','f','m','f','f')
g
g <- factor(g)
g
other.g <- factor(c('m','m','m','m','m'),levels=c('f','m'))
other.g
other.g <- factor(c('m','m','m','m','m','j'),levels=c('f','m'))
other.g
other.g <- factor(c('m','m','m','m','m'),levels=c('f','m'))
table(g)
table(other.g)
a <- factor(c('adult','adult','juvenile','juvenile','adult','adult',
'adult','juvenile','adult','juvenile'))
t <- table(a,g) #genera una tabla con la interseccion entre adultos, juvenil, f y m.
t
margin.table(t,1) #elementos de a
margin.table(t,2) #elementos de g
prop.table(t,1)
prop.table(t,2)
prop.table(t) #solo devide por 100
t
x <- 1:1000
x
10:15-1 #el -1 resta tanto al principio como al final de la secuencia
10:(15-1)
5:0 #secuencia decreciente
seq(-4,1,0.5)
seq(from=1,to=5,length=4)
seq(length=10,from=-2,by=.2) #genera una secuencia (10 elem.) que parte del -2, en incrementos de .2
rep(5,10) #repite el "5", 10 veces
rep(1:2,3)
rep(1:2,each=3)
gl(3,5)
gl(2,5,labels=c('female','male'))
rnorm(10)
rnorm(4,mean=10,sd=3) #valores con media = 10 y desviacion estándar = 3
rt(5,df=10) #df = grados de libertad
x <- c(0,-3,4,-1,45,90,-5)
x > 0 #com´para y retorna v o f si cumple con la condicion
x[x>0]
x[x <= -2 | x > 5]
z <- x[x <= -2 | x > 5]
z
x[1:3]
x[-1] #quita el primer elemento, no modifica X
pH <- c(4.5,7,7.3,8.2,6.3)
names(pH) <- c('area1','area2','mud','dam','middle')
pH
pH <- c(area1=4.5,area2=7,mud=7.3,dam=8.2,middle=6.3)
pH
pH['mud']
pH[c('area1','dam')]
m <- c(45,23,66,77,33,44,56,12,78,23)
m
dim(m) <- c(2,5)
m
m[2,3]
m[-2,1]
m[1,-c(3,5)]
m[1,]
m[,4]
m[1,,drop=F] #filas
m[,4,drop=F] #columnas
m1 <- matrix(c(45,23,66,77,33,44,56,12,78,23),2,5)
m1
cbind(c(4,76),m1[,4]) #une matrices por columnas
colnames(results)
results <- matrix(c(10,30,40,50,43,56,21,30),2,4,byrow=T)
colnames(results) <- c('1qrt','2qrt','3qrt','4qrt')
colnames(results)
results <- matrix(c(10,30,40,50,43,56,21,30),2,4,byrow=T)
colnames(results) <- c('1qrt','2qrt','3qrt','4qrt')
rownames(results) <- c('store1','store2')
results
results['store1',]
a <- array(1:24,dim=c(4,3,2)) #crea dos matrices con 4 filas y 3 columnas
a
my.lst <- list(stud.id=34453,
stud.name="John",
stud.marks=c(14.3,12,15,19))
my.lst
my.lst$stud.id
my.lst$stud.marks
my.lst[[1]]
my.lst[[3]]
x <- my.lst[[3]]
x[1]
my.lst[[3]][1]
mode(my.lst[1])
mode(my.lst[[1]])
names(my.lst)
names(my.lst) <- c('id','name','marks')
my.lst
names(my.lst)
my.lst$parents.names <- c("Ana","Mike")
my.lst
length(my.lst)
my.lst <- my.lst[-5] #quita el elemnto n°5
my.lst
my.lst <- my.lst[-5] #quita el elemnto n°5
other <- list(age=19,sex='male')
lst <- c(my.lst,other)
lst
my.dataset <- data.frame(site=c('A','B','A','A','B'),
season=c('Winter','Summer','Summer','Spring','Fall'),
pH = c(7.4,6.3,8.6,7.2,8.9))
attach(my.dataset)
View(my.dataset)
iris
x <- iris
View(x)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
dim(iris)
name(iris[5])
names(iris[5])
X <- iris[,1:4]
X <- iris[,1:4]
y <- [,5]
y <- iris[,5]
yName <-  "Species"
ParallelPlot(X, seq(1,nrow(X),1), seq(1,ncol(X),1), y, yName, lineSize = 1, alphaLine = 0.5, x_lab = FALSE)
library('RegressionLibs')
ParallelPlot(X, seq(1,nrow(X),1), seq(1,ncol(X),1), y, yName, lineSize = 1, alphaLine = 0.5, x_lab = FALSE)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
min(outlier.scores()
)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
min(iris)
min(iris[,1:4])
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
