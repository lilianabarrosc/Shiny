paste("hola", "hola", c(""), sep = " , ")
paste("hola", "hola", rep(""), sep = " , ")
paste("hola", "hola", rep("", 1:2), sep = " , ")
paste("hola", "hola", sep = " , ")
string
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ","),
")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",", rep(''))
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ","
)
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,pass, sep = ","))
admin <- 'user2'
pass <- 1234
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,pass, sep = ","))
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ","))
drv <- dbDriver("PostgreSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
as.array(paste("hola", "hola", sep = " , "))
as.character(paste("hola", "hola", sep = " , "))
as.character(1:12)
as.character(1:12, sep = ",")
paste0(nth, collapse = ", ")
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
paste0(nth, collapse = ", ")
paste("'hola'", "'hola'", sep = " , ")
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
paste("1st", "2nd", "3rd", sep = " ',' ")
paste("1st", "2nd", "3rd", sep = "' , '")
paste("1st", "2nd", "3rd", sep = "'' , '")
paste("1st", "2nd", "3rd", sep = "' , '")
uno = "1st"
dos <- "2st"
tres <- "3st"
paste(uno, dos, tres, sep = "' , '")
paste ("'", paste(uno, dos, tres, sep = "' , '"))
paste("insert into user_guinia (user_name,name,last_name,email,password) values ('",
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = "','"),
"')")
paste("insert into user_guinia (user_name,name,last_name,email,password) values ('",
paste(uno,dos,tres, sep = "','"),
"')")
shiny::runApp('GitHub/Shiny')
drv <- dbDriver("PostgreSQL")
dbListConnections(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
fetch(rs,n=-1)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'ad'")
fetch(rs,n=-1)
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
rs
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
rs
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
fetch(rs,n=-1)
summary(rs)
dbDisconnect(con)
dbUnloadDriver(drv)
library(RPostgreSQL)
#Lectura del driver para postgress
drv <- dbDriver("PostgreSQL")
dbListConnections(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
#enviar una consulta a una tabla determinada
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
getInfo <- fetch(rs,n=-1)
getInfo
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admi'")
getInfo <- fetch(rs,n=-1)
getInfo
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admi'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
n
getInfo
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
fetch(rs,n=-1)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
rs
fetch(rs,n=-1)
getInfo <- nrow(fetch(rs,n=-1))
n <- nrow(rs)
fetch(rs,n=-1)
rs,n=2
fetch(rs,n=2)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
a <- rs
a
dbFetch(rs)
dbFetch(rs)
dbFetch(rs)
a <- rs
dbGetStatement(rs)
result <- fetch(rs,n=-1)
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
result <- fetch(rs,n=-1)
result
result[1]
View(result)
result[,1]
as.character(result)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
shiny::runApp('GitHub/Shiny')
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
a <- "hola"
b <- "hola"
c <- "123"
a=b
a==b
a==c
b <- as.character(a)
a==b
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
my_password <- as.character(fetch(rs,n=-1))
getInfo <- nrow(my_password) #puedo obtener los elemntos de la consulta
my_password == "hola"
my_password == "123"
my_password == '123'
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
my_password <- as.character(fetch(rs,n=-1))
getInfo <- nrow(my_password) #puedo obtener los elemntos de la consulta
my_password <- as.character(fetch(rs,n=-1))
my_password
is.na(my_password)
is.null(my_password)
my_password <- fetch(rs,n=-1)
getInfo <- nrow(my_password) #puedo obtener los elemntos de la consulta
getInfo>0
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
View(viewData)
View(tabsVisualization)
library('shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
paste("select password from user_guinia where user_name ='",
Username, "'")
paste("select password from user_guinia where user_name ='",
'Username', "'")
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
paste("'", "admin '")
paste("'", "admin'")
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1)
anova(lm.D9)
library(MASS)
#install.packages("ISLR")
library(ISLR)
lm.fit=lm(medv~lstat,data=Boston) #aplicando el modelo lineal
lm.fit #informaciÃ³n basica de modelo
summary(lm.fit) #informacion mas detallada sobre el modelo
anoa(lm.fit)
anova(lm.fit)
anova.lm(lm.fit)
plot(lm.fit)
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
names(vehicles)
pls1
b <- rmse(pls1$y.pred, vehicles[,13])
a <- paste(pls1$std.coefs, paste(pls1$reg.coefs, pls1$y.pred)
firstRow <- c(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)
plot(pls1)
plot(lm.fit)
plot(lm.fit)
plot2(lm.fit)
anova(pls1)
library('plsdepot') #Libreria para utilizar pls
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
pls1$std.coefs
pls1$reg.coefs
my.lst <- list(stud.id=34453,
stud.name="John",
stud.marks=c(14.3,12,15,19))
my.lst
shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = FALSE)
pls1
pls1$y.pred
pls1$Q2
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1$Q2
diagnosticData(pls1)
diagnosticData(pls1$y.pred)
diagnosticData(pls1$std.coefs)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shinyServer(function(input, output, session) {
observe({
if (input$browse == 0) return()
updateTextInput(session, "path",  value = file.choose())
})
contentInput <- reactive({
if(input$upload == 0) return()
isolate({
writeLines(paste(readLines(input$path), collapse = "\n"))
})
})
output$content <- renderPrint({
contentInput()
})
})
shinyUI(pageWithSidebar(
headerPanel("Example"),
sidebarPanel(
textInput("path", "File:"),
actionButton("browse", "Browse"),
tags$br(),
actionButton("upload", "Upload Data")
),
mainPanel(
verbatimTextOutput('content')
)
))
server <- function(input, output, session) {
observe({
if (input$browse == 0) return()
updateTextInput(session, "path",  value = file.choose())
})
contentInput <- reactive({
if(input$upload == 0) return()
isolate({
writeLines(paste(readLines(input$path), collapse = "\n"))
})
})
output$content <- renderPrint({
contentInput()
})
})
ui <- pageWithSidebar(
headerPanel("Example"),
sidebarPanel(
textInput("path", "File:"),
actionButton("browse", "Browse"),
tags$br(),
actionButton("upload", "Upload Data")
),
mainPanel(
verbatimTextOutput('content')
)
))
shinyApp(ui, server)
server <- function(input, output, session) {
observe({
if (input$browse == 0) return()
updateTextInput(session, "path",  value = file.choose())
})
contentInput <- reactive({
if(input$upload == 0) return()
isolate({
writeLines(paste(readLines(input$path), collapse = "\n"))
})
})
output$content <- renderPrint({
contentInput()
})
}
ui <- pageWithSidebar(
headerPanel("Example"),
sidebarPanel(
textInput("path", "File:"),
actionButton("browse", "Browse"),
tags$br(),
actionButton("upload", "Upload Data")
),
mainPanel(
verbatimTextOutput('content')
)
)
shinyApp(ui, server)
server <- function(input, output, session) {
observe({
if (input$browse == 0) return()
updateTextInput(session, "path",  value = file.choose())
})
contentInput <- reactive({
if(input$upload == 0) return()
isolate({
writeLines(paste(readLines(input$path), collapse = "\n"))
})
})
output$content <- renderPrint({
contentInput()
})
}
ui <- pageWithSidebar(
headerPanel("Example"),
sidebarPanel(
textInput("path", "File:"),
actionButton("browse", "Browse"),
tags$br(),
actionButton("upload", "Upload Data")
),
mainPanel(
verbatimTextOutput('content')
)
)
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
g <- airquality$Month
l <- split(airquality, g)
pangram <- "The quick brown fox jumps over the lazy dog"
pangram <- "The quick brown fox jumps over the lazy dog"
pangram <- "The quick brown fox jumps over the lazy dog"
strsplit(pangram, " ")
pangram <- "https://dl.dropboxusercontent.com/u/12599702/autosclean.csv"
strsplit(pangram, "/")
a <- strsplit(pangram, "/")
a[[1]]
a[[1]][length(a)]
a[[1]][length(a[[1]])]
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
library('shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
diagnosticData(pls1)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
paste("guinia",".png")
paste('guinia', '.csv', sep='')
paste("guinia", '.csv', sep='')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
Statistical <- as.data.frame(array(0, dim=c(1,3)))
names(Statistical) <- c("RMSE", "R2", "IA")
View(Statistical)
Statistical[1,2] <- 2
View(Statistical)
Statistical[1,1] <- 2
View(Statistical)
paste("select password from user_guinia where user_name ='",
'Username', "'", sep = '')
paste("select password from user_guinia where user_name ='",
'Username', "'", sep = '','')
paste("select password from user_guinia where user_name ='",
'Username', "'", sep = "','")
#-----------------------> Regresion <-----------------------
install.packages("pls")
library(pls)
data(oliveoil)
sens.pcr <- pcr(sensory ~ chemical, ncomp = 4, scale = TRUE, data = oliveoil)
sens.pls <- plsr(sensory ~ chemical, ncomp = 4, scale = TRUE, data = oliveoil)
sens.pcr
summary(sens.pcr)
summary(sens.pcs)
summary(sens.pls)
sens.pls <- plsr(sensory ~ chemical, data = oliveoil)
summary(sens.pls)
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
a <- as.formula("x~.")
a
a <- as.formula()
a <- as.formula("")
a <- as.formula("~")
a <- as.formula("~.")
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
