#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
install.packages("shinythemes")
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
library(shinythemes)
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage( theme = shinytheme("cerulean"),
headerPanel("New Application"),
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
library(shinythemes)
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage( theme = shinytheme("flatly"),
headerPanel("New Application"),
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
library(shinythemes)
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage( includeCSS("styles.css"),
headerPanel("New Application"),
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
library(shinythemes)
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage( includeCSS("styles.css"),
headerPanel("New Application"),
fluidRow(
#BreadCrumds
column(12,
uiOutput("select_box_lm_y")
)
#     <ul class="breadcrumbs">
#       <li><a href="#">Home</a></li>
#       <li><a href="#">Features</a></li>
#       <li class="unavailable"><a href="#">Gene Splicing</a></li>
#       <li class="current"><a href="#">Cloning</a></li>
#       </ul>
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
listNamesData <- NULL #lista con las opciones del select con e formato "x" = 1
numVariables <- dim(iris)[2]
namesVariables <- names(iris)
for (i in 1:numVariables ) {
listNamesData <-  c(listNamesData, paste(namesVariables[i], i, sep=" = "))
}
#-----------------------> lm
#seleccion de la variable dependiente
output$select_box_lm_y <- renderUI({
selectInput("lm_y", label = h4("Dependent variable"),
choices = listNamesData, selected = numVariables)
})
}
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
fit <- lm('ozone' ~ ., data=airquality)
fit <- lm('Ozone' ~ ., data = airquality)
airquality$Ozone
fit <- lm(Ozone ~ ., data=airquality)
summary(fit)
xnam <- paste0("x", 1:25)
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
(fmla <- as.formula(paste(paste('y', collapse = " ~ "), collapse = ".")))
(fmla <- as.formula(paste(paste('y', " ~ "), ".")))
shiny::runApp('GitHub/Shiny')
(fmla <- as.formula(paste(paste('y', " ~ "), paste('x', " - "))))
(fmla <- as.formula(paste(paste('y', " ~ "), paste(xnam, " - "))))
(fmla <- as.formula(paste(paste('y', " ~ "), paste(xnam, collapse = " - "))))
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
setwd("~/GitHub/Shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
