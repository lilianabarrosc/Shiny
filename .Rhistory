# projects <- fluidPage(
#   fluidRow(
#     box(
#       title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
#       plotOutput("plot1")
#     )
#   )
# )
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(airquality[,2],
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
# sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
#   menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
#
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(airquality[,2],
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(airquality[,2],
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
),
box(
title = "Range", width = 6, solidHeader = TRUE,
background = "aqua",
sliderInput("atributes", label = "Atributes", min = 1,
max = 100, value = c(1, 3)),
sliderInput("observation", label = "Observation", min = 1,
max = 100, value = c(1, 60))
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
selectedData <- reactive({
airquality[input$observation[1]:input$observation[2],
input$atributes[1]:input$atributes[2]]
})
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(selectedData(),
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
),
box(
title = "Range", width = 6, solidHeader = TRUE,
background = "aqua",
sliderInput("atributes", label = "Atributes", min = 1,
max = 100, value = c(1, 3)),
sliderInput("observation", label = "Observation", min = 1,
max = 100, value = c(1, 60))
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
selectedData <- reactive({
airquality[,
input$atributes[1]:input$atributes[2]]
})
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(selectedData(),
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
),
box(
title = "Range", width = 6, solidHeader = TRUE,
background = "aqua",
sliderInput("atributes", label = "Atributes", min = 1,
max = 100, value = c(1, 3)),
sliderInput("observation", label = "Observation", min = 1,
max = 100, value = c(1, 60))
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
selectedData <- reactive({
airquality[,
input$atributes[1]:input$atributes[2]]
})
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(selectedData(),
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
),
box(
title = "Range", width = 6, solidHeader = TRUE,
background = "aqua",
sliderInput("atributes", label = "Atributes", min = 1,
max = 100, value = c(1, 3)),
sliderInput("observation", label = "Observation", min = 1,
max = 100, value = c(1, 60))
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
selectedData <- reactive({
airquality[,
input$atributes[2]]
})
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
barplot(selectedData(),
border="blue")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
missmap(airquality[,2], main = "Missing values vs observed")
library('Amelia')
library('Amelia')
missmap(airquality[,2], main = "Missing values vs observed")
missmap(airquality[,1:2], main = "Missing values vs observed")
#install.packages('shiny')
library('shiny')
library('shinydashboard')
#install.packages("devtools") #para instalar install_github
library(devtools) #Para usar install_github
#install_github("vqv/ggbiplot") #Para instalar ggplot
#install.packages("Amelia")
library(ggbiplot)
library(plotly)
#grafico de missing values
#library(Amelia)
#missmap(airquality[,1:2], main = "Missing values vs observed")
#library(VIM)
#aggr_plot <- aggr(airquality, col=c('red','dark grey'), numbers=TRUE,
#                  sortVars=TRUE, labels=names(data), cex.axis=.8, gap=1,
#                  ylab=c("Histogram of missing data","Pattern"))
#matrixplot(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F)
#scattmatrixMiss(airquality, interactive = F, highlight = c("Ozone"))
#fin graficos missing values
Spectral <- function (dataSet, row) {
y <- dataSet[row,]
y <- y[,3:(ncol(y)-1)]
dataPlot <- data.frame(x=integer(), y=integer(), stringsAsFactors=FALSE)
count <- 0
for (i in 1:ncol(y)) {
dataPlot[nrow(dataPlot)+1,1] <- i
dataPlot[nrow(dataPlot),2] <- y[1,i]
}
row <- dataSet[row,2]
ggplot(data = dataPlot, aes(x = x, y = y, group = 1)) +
geom_line(colour = "dodgerblue4", alpha = 0.8, size = 1) +
xlab(paste("Instance", row)) + ylab("Values") +
theme(panel.grid.minor = element_blank(), #remove gridlines
legend.position = "bottom" #legend at the bottom
)#end theme
}
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Grafics", width = 10, solidHeader = TRUE, status = "primary",
plotOutput("plot1")
),
box(
title = "Range", width = 6, solidHeader = TRUE,
background = "aqua",
sliderInput("atributes", label = "Atributes", min = 1,
max = 100, value = c(1, 3)),
sliderInput("observation", label = "Observation", min = 1,
max = 100, value = c(1, 60))
)
)
)
body <- dashboardBody(projects)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
selectedData <- reactive({
airquality[,
input$atributes[1]:input$atributes[2]]
})
#nombre del grafico para llamarlo en la vista
output$plot1 <- renderPlot({
#Spectral(iris, 10) #Instancia 701
#funciona bien
#     barplot(selectedData(),
#             border="blue")
missmap(selectedData(), main = "Missing values vs observed")
})
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
setwd("~/GitHub/Shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
