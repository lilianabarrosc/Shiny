shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg2(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
plot(pls1)
pls1$Q2
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
paste("fit2()",paste('$',"input$pls_varible"))
paste("fit2()",paste($,"input$pls_varible"))
paste("fit2()",paste("$","input$pls_varible"))
shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
pls1$R2
summary(pls1)
shiny::runApp('GitHub/Shiny')
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Boston)
lm.fit=lm(medv~lstat) #aplicando el modelo lineal
lm.fit=lm(medv~lstat,data=Boston)
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit) #mas informacion sobre el modelo
names(lm.fit)
coef(lm.fit)
coef(lm.fit)
lm.fit$coefficients
confint(lm.fit) #obtener un intervalo de confianza
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
lstat=(c(5,10,15))
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence") #intervalo de confianza
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction") #intervalo de prediccion
plot(lstat,medv)
fix(Boston) #editor de datos de R
names(Boston) #predictores
lm.fit=lm(medv~lstat)
lm.fit=lm(medv~lstat,data=Boston) #aplicando el modelo lineal
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit #información basica de modelo
summary(lm.fit) #informacion mas detallada sobre el modelo
names(lm.fit)
#lm.fit$coefficients
coef(lm.fit)
confint(lm.fit) #obtener un intervalo de confianza para los coef estimados
# prediccion de medv para unos valores de lstat
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence") #intervalo de confianza
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction") #intervalo de prediccion
plot(lstat,medv)
attach(Boston)
plot(lstat,medv)
lstat
medv
names(Boston) #predictores
fix(Boston) #editor de datos de R
attach(Boston)
plot(lstat,medv)
abline(lm.fit)
lm.fit=lm(medv~lstat,data=Boston) #aplicando el modelo lineal
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch=15) #
plot(lstat,medv,pch=20) #
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2)) #divide el grafico en una region de 2x2
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
library(car)
vif(lm.fit)
lm.fit=lm(medv~.,data=Boston) #usando todas las variables de predictores (13)
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston) #usando todas las variables menos ege
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
summary(lm.fit1)
lm.fit2=lm(medv~lstat+I(lstat^2)) #predictor de la forma x^2
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
result < - kmeans(iris, centers=2)
result <- kmeans(iris, centers=2)
result <- kmeans(iris, 2)
result <- kmeans(iris, 1)
result <- kmeans(iris, 14)
data(iris)
idxs <- sample(1:nrow(iris),as.integer(0.7*nrow(iris)))
trainIris <- iris[idxs,]
testIris <- iris[-idxs,]
nn3 <- kNN(Species ~ .,trainIris,testIris,norm=FALSE,k=3)
nn5 <- kmeans(Species ~ .,trainIris,testIris,norm=TRUE,k=5)
cells <- c(1, 1, 2, 1, 4, 3, 5, 4)
rnames <- c("A", "B", "C", "D")
cnames <- c("X", "Y")
x <- matrix(cells, nrow=4, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
x
km <- kmeans(x, 2, 15)
print(km)
plot(x, col = km$cluster)
points(km$centers, col = 1:2, pch = 8)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
firstRow <- as.data.frame(array(0, dim=c(1,4)))
firstRow <- as.data.frame(array(0, dim=c(1,4)))
View(firstRow)
names(firstRow) <- c("Name", "RMSE", "R2", "IA")
View(firstRow)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
iris["sepal.length"]
names(iris)
iris["Sepal.Length"]
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
obs <- 1:10
sim <- 2:11
rmse(sim, obs)
shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
library(MASS)
library(ISLR)
fix(Boston) #editor de datos de R
names(Boston) #predictores
lm.fit=lm(medv~lstat)
lm.fit=lm(medv~lstat,data=Boston) #aplicando el modelo lineal
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit #información basica de modelo
summary(lm.fit) #informacion mas detallada sobre el modelo
coef(lm.fit)
confint(lm.fit) #obtener un intervalo de confianza para los coef estimados
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence") #intervalo de confianza
fix(Boston) #editor de datos de R
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction") #intervalo de prediccion
attach(Boston)
plot(lstat,medv)
abline(lm.fit) #linea de regresion de minimos cuadrados
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red") #cambia el color del grafico
plot(lstat,medv,pch=20) # dibuja circulos en los puntos, pch son formas
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20) #todas las formas de pch
par(mfrow=c(2,2)) #divide el grafico en una region de 2x2
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit)) # calcular los residuales
plot(predict(lm.fit), rstudent(lm.fit)) # calcular los residuales estandarizados
plot(hatvalues(lm.fit)) #valores ajustados
which.max(hatvalues(lm.fit)) #numero de elementos del vector
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston) #usando todas las variables de predictores (13)
summary(lm.fit)
library(car)
vif(lm.fit) #calcular los factores de inflacion de la varianza
lm.fit1=lm(medv~.-age,data=Boston) #usando todas las variables menos ege
summary(lm.fit1)
summary(lm(medv~lstat*age,data=Boston)) #incluye la interaccion entre lstat×age
lm.fit2=lm(medv~lstat+I(lstat^2)) #predictor de la forma x^2
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5)) #aplicando el modelo a un polinomio
summary(lm.fit5)
cells <- c(1, 1, 2, 1, 4, 3, 5, 4)
rnames <- c("A", "B", "C", "D")
cnames <- c("X", "Y")
x <- matrix(cells, nrow=4, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
View(x)
km <- kmeans(x, 2, 15)
print(km)
plot(x, col = km$cluster)
points(km$centers, col = 1:2, pch = 8)
shiny::runApp('GitHub/Shiny')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
pls1$std.coefs
$reg.coefs
pls$reg.coefs
pls1$reg.coefs
pls1$$y.pred
pls1$y.pred
pls1$R2
firstRow <- as.data.frame(c(pls1$std.coefs, pls1$reg.coefs, pls1, $y.pred)))
firstRow <- as.data.frame(c(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)))
firstRow <- as.data.frame(c(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred))
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
firstRow <- as.data.frame(c(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred))
View(firstRow)
a <- array(0, dim=c(1,4))
View(a)
pls1$std.coefs
dim(pls1$std.coefs)
a <- array(0, dim=c(ncol(vehicles),3))
View(a)
a <- array(pls1$std.coefs, dim=c(ncol(vehicles),3))
View(a)
firstRow <- as.data.frame(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)
a <- table(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)
firstRow <- c(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)
View(a)
pls1$std.coefs
pls1$reg.coefs
a <- pls1$reg.coefs
print(pls1$std.coefs, pls1$reg.coefs, pls1$y.pred)
print(paste(pls1$std.coefs, paste(pls1$reg.coefs, pls1$y.pred))
print pls1$reg.coefs)
a <- paste(pls1$std.coefs, paste(pls1$reg.coefs, pls1$y.pred)
)
a
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
b <- rmse(pls$y.pred, vehicles[,13])
b <- rmse(pls1$y.pred, vehicles[,13])
names(iris)
iris["Sepal.Length"]
iris[,1]
names(vehicles)
vehicles[13]
vehicles[,13]
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
data(vehicles)
library('plsdepot')
data(vehicles)
pls1 <- plsreg1(vehicles[,1:12], vehicles[,13], crosval = TRUE)
pls1
data(iris)
head(iris)
shiny::runApp('GitHub/Shiny')
drv <- dbDriver("PostgreSQL")
dbListConnections(drv)
dbGetInfo(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
summary(con)
rs <- dbSendQuery(con, "select * from user_guinia")
fetch(rs,n=-1)
rs <- dbSendQuery(con, "insert into user_guinia (user_name,password) values ('admin','123')")
fetch(rs,n=-1)
rs <- dbSendQuery(con, "select * from user_guinia")
fetch(rs,n=-1)
rs <- dbSendQuery(con, "insert into user_guinia (user_name,password) values ('admin','123')")
shiny::runApp('GitHub/Shiny')
dbDisconnect(con)
dbUnloadDriver(drv)
dbDisconnect(con)
dbUnloadDriver(drv)
shiny::runApp('GitHub/Shiny')
cells <- c(1, 1, 2, 1, 4, 3, 5, 4)
rnames <- c("A", "B", "C", "D")
cnames <- c("X", "Y")
x <- matrix(cells, nrow=4, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
View(x)
km <- kmeans(x, 2, 15)
print(km)
plot(x, col = km$cluster)
km <- kmeans(x, 1, 15)
plot(x, col = km$cluster)
km <- kmeans(x, 3, 15)
plot(x, col = km$cluster)
km <- kmeans(x, 4, 15)
plot(x, col = km$cluster)
string <- paste("insert into user_guinia (user_name,name,last_name,email,password) values (",
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ","),
")")
string
paste("hola", "hola", sep = "'")
paste0(1:12, c("st", "nd", "rd", rep("th", 9))
)
paste("hola", "hola", c(""))
paste("hola", "hola", c(""), sep = ",")
paste("hola", "hola", c(""), sep = " , ")
paste("hola", "hola", rep(""), sep = " , ")
paste("hola", "hola", rep("", 1:2), sep = " , ")
paste("hola", "hola", sep = " , ")
string
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ","),
")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",")
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ",", rep(''))
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = ","
)
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,pass, sep = ","))
admin <- 'user2'
pass <- 1234
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,pass, sep = ","))
paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ","))
drv <- dbDriver("PostgreSQL")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
as.array(paste("hola", "hola", sep = " , "))
as.character(paste("hola", "hola", sep = " , "))
as.character(1:12)
as.character(1:12, sep = ",")
paste0(nth, collapse = ", ")
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
paste0(nth, collapse = ", ")
paste("'hola'", "'hola'", sep = " , ")
paste("1st", "2nd", "3rd", collapse = ", ")
paste("1st", "2nd", "3rd", sep = ", ")
paste("1st", "2nd", "3rd", sep = " ',' ")
paste("1st", "2nd", "3rd", sep = "' , '")
paste("1st", "2nd", "3rd", sep = "'' , '")
paste("1st", "2nd", "3rd", sep = "' , '")
uno = "1st"
dos <- "2st"
tres <- "3st"
paste(uno, dos, tres, sep = "' , '")
paste ("'", paste(uno, dos, tres, sep = "' , '"))
paste("insert into user_guinia (user_name,name,last_name,email,password) values ('",
paste('input$newUserName','input$name','input$lastName','input$email','input$newPasswd', sep = "','"),
"')")
paste("insert into user_guinia (user_name,name,last_name,email,password) values ('",
paste(uno,dos,tres, sep = "','"),
"')")
shiny::runApp('GitHub/Shiny')
drv <- dbDriver("PostgreSQL")
dbListConnections(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
fetch(rs,n=-1)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'ad'")
fetch(rs,n=-1)
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
rs
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
rs
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
fetch(rs,n=-1)
summary(rs)
dbDisconnect(con)
dbUnloadDriver(drv)
library(RPostgreSQL)
#Lectura del driver para postgress
drv <- dbDriver("PostgreSQL")
dbListConnections(drv)
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
#enviar una consulta a una tabla determinada
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
getInfo <- fetch(rs,n=-1)
getInfo
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admi'")
getInfo <- fetch(rs,n=-1)
getInfo
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admi'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
n
getInfo
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
fetch(rs,n=-1)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
rs
fetch(rs,n=-1)
getInfo <- nrow(fetch(rs,n=-1))
n <- nrow(rs)
fetch(rs,n=-1)
rs,n=2
fetch(rs,n=2)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
n <- nrow(rs)
getInfo <- nrow(fetch(rs,n=-1))
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
a <- rs
a
dbFetch(rs)
dbFetch(rs)
dbFetch(rs)
a <- rs
dbGetStatement(rs)
result <- fetch(rs,n=-1)
fetch(rs,n=2) # retorna los ultimos dos elementos grabados
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
result <- fetch(rs,n=-1)
result
result[1]
View(result)
result[,1]
as.character(result)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
shiny::runApp('GitHub/Shiny')
#Cerrar la conexion
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
a <- "hola"
b <- "hola"
c <- "123"
a=b
a==b
a==c
b <- as.character(a)
a==b
rs <- dbSendQuery(con, paste("insert into user_guinia (user_name,password) values ( ", paste(admin,paste (pass,")"), sep = ",")))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='Guinia_bd',
user='postgres', password='liliana10')
rs <- dbSendQuery(con, "select password from user_guinia where user_name = 'admin'")
my_password <- as.character(fetch(rs,n=-1))
getInfo <- nrow(my_password) #puedo obtener los elemntos de la consulta
my_password == "hola"
my_password == "123"
my_password == '123'
dbDisconnect(con)
#liberar la conexion con el driver
dbUnloadDriver(drv)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
