}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
#library('plotly')
# source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
# source("user.R")
list_field_user = list(tabPanel("test2",fluidRow(column(6,numericInput("inputtest", "test", value = 0),column(6,actionButton(inputId ="test1",label ="go"))))),
h1("1234"),h2("234"))
# source("admin.R")
list_field_admin = list( h1("admin"),h2("admin"))
my_username <- c("test","admin") #dos usuarios test y admin
my_password <- c("test","123") # las claves de los usuarios
get_role = function(user){
if(user=="test") {
return("TEST")
}else{
return("ADMIN")
}
}
get_ui=function(role){
if(role=="TEST"){
return(list_field_user)
}else{
return(list_field_admin)
}
}
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(side),
dashboardBody(
uiOutput("page")
)
)
server <- function(input, output, session) {
USER <- reactiveValues(Logged = FALSE,role=NULL)
ui1 <- function(){
#     tagList(
#       div(id = "login",
tabBox(
title = "Login",
width = 6,
# id = "tabset",
tabPanel("login",
textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login","Log in")
),
tabPanel("Register",
textInput("newUserName", "Username"),
textInput("email", "Email Address"),
passwordInput("newPasswd", "Password"),
passwordInput("confirmPasswd", "Confirm Password"),
br(),submitButton("Register Now")
)
#           wellPanel(textInput("userName", "Username"),
#                     passwordInput("passwd", "Password"),
#                     br(),actionButton("Login", "Log in"))
)
#,tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -10px;margin-left: -150px;}")
#  )
}
ui2 <- function(){list(tabPanel("Test",get_ui(USER$role)[2:3]),get_ui(USER$role)[[1]])}
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$role=get_role(Username)
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
#box(
#div(class="outer",do.call(bootstrapPage,c("",ui1()))))
ui1()
})
}
if (USER$Logged == TRUE)    {
output$page <- renderUI({
box(width = 12,
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
)})
#print(ui)
side <- sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Data", tabName = "data",
menuSubItem("Source", tabName = "source", icon = shiny::icon("angle-double-right")),
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))
))
}
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
#library('plotly')
# source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
# source("user.R")
list_field_user = list(tabPanel("test2",fluidRow(column(6,numericInput("inputtest", "test", value = 0),column(6,actionButton(inputId ="test1",label ="go"))))),
h1("1234"),h2("234"))
# source("admin.R")
list_field_admin = list( h1("admin"),h2("admin"))
my_username <- c("test","admin") #dos usuarios test y admin
my_password <- c("test","123") # las claves de los usuarios
get_role = function(user){
if(user=="test") {
return("TEST")
}else{
return("ADMIN")
}
}
get_ui=function(role){
if(role=="TEST"){
return(list_field_user)
}else{
return(list_field_admin)
}
}
side <- sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home"))
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(side),
dashboardBody(
uiOutput("page")
)
)
server <- function(input, output, session) {
USER <- reactiveValues(Logged = FALSE,role=NULL)
ui1 <- function(){
#     tagList(
#       div(id = "login",
tabBox(
title = "Login",
width = 6,
# id = "tabset",
tabPanel("login",
textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login","Log in")
),
tabPanel("Register",
textInput("newUserName", "Username"),
textInput("email", "Email Address"),
passwordInput("newPasswd", "Password"),
passwordInput("confirmPasswd", "Confirm Password"),
br(),submitButton("Register Now")
)
#           wellPanel(textInput("userName", "Username"),
#                     passwordInput("passwd", "Password"),
#                     br(),actionButton("Login", "Log in"))
)
#,tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -10px;margin-left: -150px;}")
#  )
}
ui2 <- function(){list(tabPanel("Test",get_ui(USER$role)[2:3]),get_ui(USER$role)[[1]])}
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$role=get_role(Username)
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
#box(
#div(class="outer",do.call(bootstrapPage,c("",ui1()))))
ui1()
})
}
if (USER$Logged == TRUE)    {
output$page <- renderUI({
box(width = 12,
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
)})
#print(ui)
side <- sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Data", tabName = "data",
menuSubItem("Source", tabName = "source", icon = shiny::icon("angle-double-right")),
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))
))
}
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
#library('plotly')
# source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
# source("user.R")
list_field_user = list(tabPanel("test2",fluidRow(column(6,numericInput("inputtest", "test", value = 0),column(6,actionButton(inputId ="test1",label ="go"))))),
h1("1234"),h2("234"))
# source("admin.R")
list_field_admin = list( h1("admin"),h2("admin"))
my_username <- c("test","admin") #dos usuarios test y admin
my_password <- c("test","123") # las claves de los usuarios
get_role = function(user){
if(user=="test") {
return("TEST")
}else{
return("ADMIN")
}
}
get_ui=function(role){
if(role=="TEST"){
return(list_field_user)
}else{
return(list_field_admin)
}
}
side <- sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home"))
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(uiOutput("side")),
dashboardBody(
uiOutput("page")
)
)
server <- function(input, output, session) {
USER <- reactiveValues(Logged = FALSE,role=NULL)
ui1 <- function(){
#     tagList(
#       div(id = "login",
tabBox(
title = "Login",
width = 6,
# id = "tabset",
tabPanel("login",
textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login","Log in")
),
tabPanel("Register",
textInput("newUserName", "Username"),
textInput("email", "Email Address"),
passwordInput("newPasswd", "Password"),
passwordInput("confirmPasswd", "Confirm Password"),
br(),submitButton("Register Now")
)
#           wellPanel(textInput("userName", "Username"),
#                     passwordInput("passwd", "Password"),
#                     br(),actionButton("Login", "Log in"))
)
#,tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -10px;margin-left: -150px;}")
#  )
}
ui2 <- function(){list(tabPanel("Test",get_ui(USER$role)[2:3]),get_ui(USER$role)[[1]])}
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$role=get_role(Username)
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
#box(
#div(class="outer",do.call(bootstrapPage,c("",ui1()))))
ui1()
})
}
if (USER$Logged == TRUE)    {
output$page <- renderUI({
box(width = 12,
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
)})
#print(ui)
output$side <- renderUI({
sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Data", tabName = "data",
menuSubItem("Source", tabName = "source", icon = shiny::icon("angle-double-right")),
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))
))
})
}
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
#library('plotly')
# source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
# source("user.R")
list_field_user = list(tabPanel("test2",fluidRow(column(6,numericInput("inputtest", "test", value = 0),column(6,actionButton(inputId ="test1",label ="go"))))),
h1("1234"),h2("234"))
# source("admin.R")
list_field_admin = list( h1("admin"),h2("admin"))
my_username <- c("test","admin") #dos usuarios test y admin
my_password <- c("test","123") # las claves de los usuarios
get_role = function(user){
if(user=="test") {
return("TEST")
}else{
return("ADMIN")
}
}
get_ui=function(role){
if(role=="TEST"){
return(list_field_user)
}else{
return(list_field_admin)
}
}
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(uiOutput("side")),
dashboardBody(
uiOutput("page")
)
)
server <- function(input, output, session) {
USER <- reactiveValues(Logged = FALSE,role=NULL)
ui1 <- function(){
#     tagList(
#       div(id = "login",
tabBox(
title = "Login",
width = 6,
# id = "tabset",
tabPanel("login",
textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login","Log in")
),
tabPanel("Register",
textInput("newUserName", "Username"),
textInput("email", "Email Address"),
passwordInput("newPasswd", "Password"),
passwordInput("confirmPasswd", "Confirm Password"),
br(),submitButton("Register Now")
)
#           wellPanel(textInput("userName", "Username"),
#                     passwordInput("passwd", "Password"),
#                     br(),actionButton("Login", "Log in"))
)
#,tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -10px;margin-left: -150px;}")
#  )
}
ui2 <- function(){list(tabPanel("Test",get_ui(USER$role)[2:3]),get_ui(USER$role)[[1]])}
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
USER$role=get_role(Username)
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
#box(
#div(class="outer",do.call(bootstrapPage,c("",ui1()))))
ui1()
})
output$side <- renderUI({
sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")))
})
}
if (USER$Logged == TRUE)    {
output$page <- renderUI({
box(width = 12,
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
)})
#print(ui)
output$side <- renderUI({
sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Data", tabName = "data",
menuSubItem("Source", tabName = "source", icon = shiny::icon("angle-double-right")),
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))
))
})
}
})
}
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
source('funciones/home.r')
setwd("~/GitHub/Shiny")
source('funciones/home.r')
source('funciones/regresion.r')
source('funciones/outlier.r')
source('funciones/LOF.R')
source('funciones/home.r')
shiny::runApp()
source('funciones/generalTools.r')
data_sets <- list("iris" = 1, "airquality" = 2, "sleep" = 3, "Upload file" = 4, "URL file" = 5)
#vista que muestra el listado de data set utilizados
viewData <- function() {
fluidRow(
column(width = 12,
#BreadCrumds de reduccion de la dimencionalidad
HTML('
<ul class="breadcrumb">
<li>Data</li>
<li>Source</li>
</ul>')
),
box(width = 12, status = "success",
radioButtons("select_file", label = h3("Select data Set"), selected = 2,
choices = data_sets),
# Salida de componente dinamico (subir archivo)
uiOutput("ui")
),
tabBox(width = 12,
tabPanel("STR", verbatimTextOutput("str_data")),
tabPanel("Summary", verbatimTextOutput("summary_data"))
)
)
}
#tabs de la vista de visualización, resibe como parametros el titulo del contenedor y los tabs
tabsVisualization <- function(title, tab1, tab2) {
fluidRow(
column(width = 12,
#BreadCrumds de visualizacion
HTML('
<ul class="breadcrumb">
<li>Data</li>
<li>Visualization</li>
</ul>'),
box( width = 12, title = "Change color palette", solidHeader = TRUE,
collapsible = TRUE, collapsed = TRUE,
colors("col1","col2","col3")
),
tabBox(
title = title,
width = 12,
id = "tabset1",
tabPanel(tab1,
#contenido del tab1 = Scatter plot 1
tab_grafics("scatter1",  tools_general_grafics("radio0", "note0", "save0", "cancel0",
"download0", uiOutput("slider_range_range_density"),
NULL))
),
tabPanel(tab2,
#contenido del tab2 = parallel grafics
tab_grafics("parallel", tools_general_grafics("radio1", "note1", "save1", "cancel1",
"download1", uiOutput("slider_range_range_parallel"),
uiOutput("slider_range_range_parallel2")))
)
)
)
)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
