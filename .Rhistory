#     sliderInput(x, label = "X", min = 1,
#                 max = 5, value = c(1,4)),
#     sliderInput(y, label = "Y", min = 1,
#                 max = 5, value = 2),
#     sliderInput(z, label = "Observations", min = 1,
#                 max = 60, value = c(1,20))
#   )
# }
#Funcion contenedora de las herramientas de un grafico que contenga atributos y observaciones
#Recive como parametros los nombres de cada una de lass herramientas para cada una de las vistas
tools_general_grafics <- function(radio, note, save, cancel, download, slider_type, slider_type2){
fluidRow(
#Tipo de slider correspondiente (con rango o sin rango)
slider_type,
slider_type2,
box(
title = "Download image", width = 4, solidHeader = TRUE, status = "success",
#background = "orange",
radioButtons(radio,NULL,
choices = list("PNG" = 1, "SVG" = 2, "PDF" = 3),
selected = 1),
downloadButton(download, "Download")
),
#box para los apuntes
box(
title = "Notes", width = 4, solidHeader = TRUE, status = "success",
#background = "yellow",
tags$div( class='form-group shiny-input-container',
tags$textarea("notes...", class="form-control shiny-bound-input", style="resize: none")
)
)
)
}
#contenedor con dos box, uno para el grafico y otro para las opciones
tab_grafics <- function(plot, options){
fluidRow(
column(width = 12,
plotOutput(plot)
),
column(width = 12,
#box contenedor de opciones para el grafico
box( width = 12, title = "Options", solidHeader = TRUE,
collapsible = TRUE,
#herramientas del grafico
options
)
)
)
}
shiny::runApp('GitHub/Shiny')
#tabs de la vista de datos faltantes, resibe como parametros el titulo del contenedor y los tabs
tabsMissingValues <- function(title, tab1, tab2, tab3) {
fluidRow(
column(width = 12,
#BreadCrumds de Missing values
HTML('
<ul class="breadcrumb">
<li>Preprocessing</li>
<li>Missing Values</li>
</ul>'),
box(width = 12, title = title, solidHeader = TRUE, status = "success",
tags$div( class = 'col-sm-2',
actionButton("deleteMS", label = "Delete MS",href="")
)
#                 tags$div( class = 'col-sm-2',
#                           actionButton("save", label = "Save chages",href="")
#                 ),
#                 tags$div( class = 'col-sm-2',
#                           actionButton("cancel", label = "Cancel",href="")
#                 )
),
tabBox(
width = 12,
id = "tabset2",
tabPanel(tab1,
#opcion1 de visualizacion
tab_grafics("missing1", tools_general_grafics("radio", "note", "save", "cancel",
"download", uiOutput("slider_range_range_amelia"),NULL))
),
tabPanel(tab2,
#opcion2 de visualizacion
tab_grafics("missing2", tools_general_grafics("radio2", "note2", "save2", "cancel2",
"download2", uiOutput("slider_range_range_option1"), NULL))
),
tabPanel(tab3,
#opcion3 de visualizacion
tab_grafics("missing3", tools_general_grafics("radio3", "note3", "save3", "cancel3",
"download3", uiOutput("slider_range_range_option2"), NULL))
)
)
)
)
}
#Vista correspondiente a eliminacion de ruido
noiseRemoval <- function(title){
fluidRow(
column(width = 12,
#BreadCrumds de eliminaci?n de ruido
HTML('
<ul class="breadcrumb">
<li>Preprocessing</li>
<li>Noise removal</li>
</ul>')
),
tab_grafics("", tools_general_grafics("radio5", "note5", "save5", "cancel5",
"download5", uiOutput("slider_range_range_nremoval"), NULL))
)
}
lof <- function() {
fluidRow(
column(width = 12,
#BreadCrumds de eliminaci�n de ruido
HTML('
<ul class="breadcrumb">
<li>Preprocessing</li>
<li>Local outlier factor</li>
</ul>')
),
box(width = 12, title = "Local outlier factor", solidHeader = TRUE, status = "success",
box(width = 12, status = "success",
plotOutput("densityPlot"),
plotOutput("densityPlot")
),
tools_general_grafics("radio9", "note9", "save9", "cancel9",
"download9", uiOutput("sliderLOF"), NULL)
)
)
}
#--------------------------
#strtoi("att")
#Tanto atributos como observaciones son un rango
# slider_range_range <- function(x,y){
#   box(
#     title = "Range", width = 6, solidHeader = TRUE,
#     background = "aqua",
#     sliderInput(x, label = "Atributes", min = 1,
#                 max = dim(airquality)[2], value = c(1, dim(airquality)[2])),
#     sliderInput(y, label = "Observation", min = 1,
#                 max = dim(airquality)[1], value = c(1, dim(airquality)[1]))
#   )
# }
#
# #X representa atributos en un rango e Y la variable a comparar
# slider_range_int <- function(x,y,z){
#   box(
#     title = "Range", width = 6, solidHeader = TRUE,
#     background = "aqua",
#     sliderInput(x, label = "X", min = 1,
#                 max = 5, value = c(1,4)),
#     sliderInput(y, label = "Y", min = 1,
#                 max = 5, value = 2),
#     sliderInput(z, label = "Observations", min = 1,
#                 max = 60, value = c(1,20))
#   )
# }
#Funcion contenedora de las herramientas de un grafico que contenga atributos y observaciones
#Recive como parametros los nombres de cada una de lass herramientas para cada una de las vistas
tools_general_grafics <- function(radio, note, save, cancel, download, slider_type, slider_type2){
fluidRow(
#Tipo de slider correspondiente (con rango o sin rango)
slider_type,
slider_type2,
box(
title = "Download image", width = 4, solidHeader = TRUE, status = "success",
#background = "orange",
radioButtons(radio,NULL,
choices = list("PNG" = 1, "SVG" = 2, "PDF" = 3),
selected = 1),
downloadButton(download, "Download")
),
#box para los apuntes
box(
title = "Notes", width = 4, solidHeader = TRUE, status = "success",
#background = "yellow",
tags$div( class='form-group shiny-input-container',
tags$textarea("notes...", class="form-control shiny-bound-input", style="resize: none")
)
)
)
}
#contenedor con dos box, uno para el grafico y otro para las opciones
tab_grafics <- function(plot, options){
fluidRow(
column(width = 12,
plotOutput(plot)
),
column(width = 12,
#box contenedor de opciones para el grafico
box( width = 12, title = "Options", solidHeader = TRUE,
collapsible = TRUE,
#herramientas del grafico
options
)
)
)
}
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
library('plotly')
source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage(
fluidRow(
column(width = 12,
#plotlyOutput("plot1")
plotOutput("plot1")
)
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
output$plot1 <- renderPlot({
res<-LOFCraft(mtcars,threshold = 1.25,k = c(5:10)) ##calling LOF
outlier.scores=data.frame(res[1])  ## scores for the original data
DensityPlot(outlier.scores, ncol(outlier.scores))
})
}
shinyApp(ui, server)
library('RegressionLibs')
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
library('plotly')
source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage(
fluidRow(
column(width = 12,
#plotlyOutput("plot1")
plotOutput("plot1")
)
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
output$plot1 <- renderPlot({
res<-LOFCraft(mtcars,threshold = 1.25,k = c(5:10)) ##calling LOF
outlier.scores=data.frame(res[1])  ## scores for the original data
DensityPlot(outlier.scores, ncol(outlier.scores))
})
}
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
#install.packages("shinythemes")
#library('shinythemes')
#install.packages("plotly")
library('plotly')
source('C:/Users/lily_/Documents/GitHub/Shiny/funciones/LOF.R')
header <- dashboardHeader()
header$children[[2]]$children <- tags$img(src='gato.jpg',height='30',width='70')
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
menuSubItem("Visualization", tabName = "visualization", icon = shiny::icon("angle-double-right"))))
)
page <- fluidPage(
fluidRow(
column(width = 12,
#plotlyOutput("plot1")
plotOutput("plot1")
)
)
)
body <- dashboardBody(page,
tags$head(tags$style(HTML('
.skin-blue .treeview-menu>li.active>a, .skin-blue .treeview-menu>li>a:hover {
color: #00a65a;
}
')
)
)
)
ui <- dashboardPage(header, sidebar, body)
# #cambio de personalización de colores
# ui <- dashboardPage(
#   dashboardHeader(
#     title = "Example of a long title that needs more space",
#     titleWidth = 450
#   ),
#   dashboardSidebar( sidebarMenu(
#     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
#     menuItem("Widgets", icon = icon("th"), tabName = "widgets",
#              badgeLabel = "new", badgeColor = "green")
#   )),
#   dashboardBody(
#     # Also add some custom CSS to make the title background area the same
#     # color as the rest of the header.
#     tags$head(tags$style(HTML('
#                               /* logo */
#                               .skin-blue .main-header .logo {
#                               background-color: #f4b943;
#                               }
#
#                               /* logo when hovered */
#                               .skin-blue .main-header .logo:hover {
#                               background-color: #f4b943;
#                               }
#
#                               /* navbar (rest of the header) */
#                               .skin-blue .main-header .navbar {
#                               background-color: #f4b943;
#                               }
#
#                               /* main sidebar */
#                               .skin-blue .main-sidebar {
#                               background-color: #f4b943;
#                               }
#
#                               /* active selected tab in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
#                               background-color: #ff0000;
#                               }
#
#                               /* other links in the sidebarmenu */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a{
#                               background-color: #00ff00;
#                               color: #000000;
#                               }
#
#                               /* other links in the sidebarmenu when hovered */
#                               .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
#                               background-color: #ff69b4;
#                               }
#                               ')))
#     )
#
#
#     )
server <- function(input, output, session) {
output$plot1 <- renderPlot({
res<-LOFCraft(mtcars,threshold = 1.25,k = c(5:10)) ##calling LOF
outlier.scores=data.frame(res[1])  ## scores for the original data
DensityPlot(outlier.scores, ncol(outlier.scores))
})
}
shinyApp(ui, server)
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
shiny::runApp('GitHub/Shiny')
source('funciones/opcionesDashboard.r')
setwd("~/GitHub/Shiny")
source('funciones/opcionesDashboard.r')
source('funciones/LOF.R')
res<-LOFCraft(mtcars,threshold = 1.25,kk = c(5:10)) ##calling LOF
source('funciones/preprocessing.r') #si
res<-LOFCraft(mtcars,threshold = 1.25,kk = c(5:10)) ##calling LOF
source('funciones/preprocessing.r') #si
source('funciones/LOF.R')
res<-LOFCraft(mtcars,threshold = 1.25,kk = c(5:10)) ##calling LOF
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
