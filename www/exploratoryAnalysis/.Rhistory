#Reduccion de la dimencionalidad
tabItem(tabName = "pca",
tab_grafics("PCA", note_download())
),
tabItem(tabName = "svd",
tab_grafics("SVD", note_download())
),
tabItem(tabName = "test",
colinearity_options()
),
tabItem(tabName = "atributes"
),
#fin reduccion de la dimencionalidad
tabItem(tabName = "OD",
oulier_option("value"),
tab_grafics("Graphics", note_download())
)
))
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({input$numgraphics})
}
shinyApp(ui, server)
install.packages('pls')
library('pls')
model.frame
#install.packages('shiny')
#install.packages("shinydashboard")
library('shinydashboard')
library('shiny')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dsh", icon = icon("dashboard")),
menuItem("Polynomial", tabName = "polynomial", icon("cog", lib = "glyphicon"),
menuSubItem("PLS", tabName = "pls", icon = shiny::icon("angle-double-right")),
menuSubItem("RGML", tabName = "rgml", icon = shiny::icon("angle-double-right"))
),
menuItem("Neuronal", tabName = "neuronal", icon("cog", lib = "glyphicon")),
menuItem("SVM", tabName = "svm", icon("cog", lib = "glyphicon")),
menuItem("Function", tabName = "function", icon("cog", lib = "glyphicon"))
)
)
body <- dashboardBody(
tabItems(
#Tab del Dashboard
tabItem(tabName = "Dsh",
h2("Dashboard tab content"),
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table"))),
# Tab de la visualizacion
tabItem(tabName = "pls",
# ordeno el contenido por columna
fluidRow(
box(
title = "PLS parameters", width = 12, solidHeader = TRUE, status = "primary",
textInput("ncomp", label = "ncomp", value = "name..."),
textInput("yadd", label = "y.add", value = "name..."),
textInput("naction", label = "na.action", value = "name...")
),
box(
title = "Results", width = 12, solidHeader = TRUE, status = "primary",
verbatimTextOutput("value")
)
)
),
tabItem(tabName = "rgml",
# ordeno el contenido por columna
fluidRow(
box(
title = "RGML parameters", width = 12, solidHeader = TRUE, status = "primary",
textInput("type", label = "type", value = "name...")
),
box(
title = "Results", width = 12, solidHeader = TRUE, status = "primary",
verbatimTextOutput("value")
)
)
)
)
)
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({ 'Model' })
}
shinyApp(ui, server)
#install.packages('shiny')
#install.packages("shinydashboard")
library('shinydashboard')
library('shiny')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dsh", icon = icon("dashboard")),
menuItem("Ten fold cross", tabName = "tenfc"),
menuItem("Test/traning", tabName = "test"),
menuItem("5X2CV", tabName = "5x2")
)
)
body <- dashboardBody(
tabItems(
#Tab del Dashboard
tabItem(tabName = "Dsh",
h2("Dashboard tab content"),
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table"))),
# Tab de Ten fold cross
tabItem(tabName="tenfc",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de Test/traning
tabItem(tabName="test",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
textInput("description", label = "Description", value = "description..."),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
)
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de 5X2CV
tabItem(tabName="5x2",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
)
)
)
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({ 'Model' })
}
shinyApp(ui, server)
#install.packages('shiny')
#install.packages("shinydashboard")
library('shinydashboard')
library('shiny')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dsh", icon = icon("dashboard")),
menuItem("Ten fold cross", tabName = "tenfc"),
menuItem("Test/traning", tabName = "test"),
menuItem("5X2CV", tabName = "5x2")
)
)
body <- dashboardBody(
tabItems(
#Tab del Dashboard
tabItem(tabName = "Dsh",
h2("Dashboard tab content"),
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table"))),
# Tab de Ten fold cross
tabItem(tabName="tenfc",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de Test/traning
tabItem(tabName="test",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
textInput("description", label = "Description", value = "description..."),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de 5X2CV
tabItem(tabName="5x2",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
)
)
)
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({ 'Model' })
}
shinyApp(ui, server)
#install.packages('shiny')
#install.packages("shinydashboard")
library('shinydashboard')
library('shiny')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dsh", icon = icon("dashboard")),
menuItem("Ten fold cross", tabName = "tenfc"),
menuItem("Test/traning", tabName = "test"),
menuItem("5X2CV", tabName = "5x2")
)
)
body <- dashboardBody(
tabItems(
#Tab del Dashboard
tabItem(tabName = "Dsh",
h2("Dashboard tab content"),
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table"))),
# Tab de Ten fold cross
tabItem(tabName="tenfc",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de Test/traning
tabItem(tabName="test",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
textInput("description", label = "Description", value = "description..."),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
h1("Results"),
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de 5X2CV
tabItem(tabName="5x2",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
)
)
)
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({ 'Model' })
}
shinyApp(ui, server)
#install.packages('shiny')
#install.packages("shinydashboard")
library('shinydashboard')
library('shiny')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dsh", icon = icon("dashboard")),
menuItem("Ten fold cross", tabName = "tenfc"),
menuItem("Test/traning", tabName = "test"),
menuItem("5X2CV", tabName = "5x2")
)
)
body <- dashboardBody(
tabItems(
#Tab del Dashboard
tabItem(tabName = "Dsh",
h2("Dashboard tab content"),
navbarPage("App Title",
tabPanel("Plot"),
tabPanel("Summary"),
tabPanel("Table"))),
# Tab de Ten fold cross
tabItem(tabName="tenfc",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de Test/traning
tabItem(tabName="test",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
numericInput("separacion", label = "Percentage removal", value = 1),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
h4("Results"),
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
),
# Tab de 5X2CV
tabItem(tabName="5x2",
fluidRow(
column(width = 12,
box(width = 12,
title = "Ten fold cross", status = "primary",
verbatimTextOutput("value")
)
),
column(width = 12,
box(width = 12, title = "Grafics", solidHeader = TRUE,
collapsible = TRUE
)
#plotOutput("plot1", height = 300)
)
)
)
)
)
ui <- dashboardPage( title = "Exploratory analysis", skin = "purple",
header, #titulo
sidebar, #menu lateral
body #cuerpo
)
server <- function(input, output) {
output$value <- renderPrint({ 'Model' })
}
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
newProjects <- fluidPage(
fluidRow(
column(width = 1),
box(
title = "New project", width = 10, solidHeader = TRUE, status = "primary",
actionButton("back", label = "Back",
header <- dashboardHeader(title = ":(")),
textInput("name", label = "Name", value = "name..."),
textInput("description", label = "Description", value = "description..."),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fluidRow(
column(width = 4, ""),
column(width = 2, actionButton("save", label = "Save")),
column(width = 4, actionButton("cancel", label = "Cancel"))
)
)
)
)
navBar <- navbarPage("", tabPanel("Data", newProjects),
tabPanel("exploratory analysis"),
tabPanel("to train"),
tabPanel("predict"),
tabPanel("validation"),
tabPanel("regression"))
body <- dashboardBody(navBar)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#inFile <- input$file
#if (is.null(inFile))
# return(NULL)
#read.csv(inFile)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
dashboardHeader(title = ":)")
dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
