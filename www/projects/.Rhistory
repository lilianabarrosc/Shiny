)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
#navbar <- navbarPage("", tabPanel("Data", projects),
#                 tabPanel("exploratory analysis"),
#                 tabPanel("to train"),
#                 tabPanel("predict"),
#                tabPanel("validation"),
#                 tabPanel("regression"))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Project", width = 10, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("new project", label = "New Project"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
#dataTableOutput('table')
#tags$textarea("text", rows="4", cols="50", style="resize: none")
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Nombre"),
tags$th("Descripción"),
tags$th("Fecha"),
tags$th("N° Archivos"),
tags$th("Acciones")
),
tags$tr(
tags$td("proyecto 1"),
tags$td("Descripción proy 1"),
tags$td("10/10/2015"),
tags$td("3"),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("edit", label = "Edit", icon = icon("edit")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
#navbar <- navbarPage("", tabPanel("Data", projects),
#                 tabPanel("exploratory analysis"),
#                 tabPanel("to train"),
#                 tabPanel("predict"),
#                tabPanel("validation"),
#                 tabPanel("regression"))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(width = 2),
box(
title = "Project", width = 10, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("new project", label = "New Project"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
#dataTableOutput('table')
#tags$textarea("text", rows="4", cols="50", style="resize: none")
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Nombre"),
tags$th("Descripción"),
tags$th("Fecha"),
tags$th("N° Archivos"),
tags$th("Acciones")
),
tags$tr(
tags$td("proyecto 1"),
tags$td("Descripción proy 1"),
tags$td("10/10/2015"),
tags$td("3"),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("edit", label = "Edit", icon = icon("edit")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
#navbar <- navbarPage("", tabPanel("Data", projects),
#                 tabPanel("exploratory analysis"),
#                 tabPanel("to train"),
#                 tabPanel("predict"),
#                tabPanel("validation"),
#                 tabPanel("regression"))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
column(width = 2),
box(
title = "Project", width = 10, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("new project", label = "New Project"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
#dataTableOutput('table')
#tags$textarea("text", rows="4", cols="50", style="resize: none")
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Nombre"),
tags$th("Descripción"),
tags$th("Fecha"),
tags$th("N° Archivos"),
tags$th("Acciones")
),
tags$tr(
tags$td("proyecto 1"),
tags$td("Descripción proy 1"),
tags$td("10/10/2015"),
tags$td("3"),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("edit", label = "Edit", icon = icon("edit")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
#navbar <- navbarPage("", tabPanel("Data", projects),
#                 tabPanel("exploratory analysis"),
#                 tabPanel("to train"),
#                 tabPanel("predict"),
#                tabPanel("validation"),
#                 tabPanel("regression"))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
column(width = 1),
box(
title = "Project", width = 10, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("new project", label = "New Project"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
#dataTableOutput('table')
#tags$textarea("text", rows="4", cols="50", style="resize: none")
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Nombre"),
tags$th("Descripción"),
tags$th("Fecha"),
tags$th("N° Archivos"),
tags$th("Acciones")
),
tags$tr(
tags$td("proyecto 1"),
tags$td("Descripción proy 1"),
tags$td("10/10/2015"),
tags$td("3"),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("edit", label = "Edit", icon = icon("edit")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
#navbar <- navbarPage("", tabPanel("Data", projects),
#                 tabPanel("exploratory analysis"),
#                 tabPanel("to train"),
#                 tabPanel("predict"),
#                tabPanel("validation"),
#                 tabPanel("regression"))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
newProjects <- fluidPage(
fluidRow(
column(width = 1),
box(
title = "New project", width = 10, solidHeader = TRUE, status = "primary",
actionButton("back", label = "Back"),
textInput("name", label = "Name", value = "name..."),
textInput("description", label = "Description", value = "description..."),
#cargar archivo csv o txt
fileInput("file", label = "File upload csv/txt",
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fluidRow(
column(width = 4, ""),
column(width = 2, actionButton("save", label = "Save")),
column(width = 4, actionButton("cancel", label = "Cancel"))
)
)
)
)
navBar <- navbarPage("", tabPanel("Data", newProjects),
tabPanel("exploratory analysis"),
tabPanel("to train"),
tabPanel("predict"),
tabPanel("validation"),
tabPanel("regression"))
body <- dashboardBody(navBar)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#inFile <- input$file
#if (is.null(inFile))
# return(NULL)
#read.csv(inFile)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
column(width = 1),
box(
title = "Project", width = 10, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("back", label = "Back"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
tags$label("Search",
tags$link( "Data set 1"
)
),
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Data set"),
tags$th("Description"),
tags$th("Size"),
tags$th("Date"),
tags$th("Dimensions"),
tags$th("Instance"),
tags$th("Actions")
),
tags$tr(
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("download", label = "Download", icon = icon("download")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
#install.packages('shiny')
library('shiny')
library('shinydashboard')
header <- dashboardHeader(title = ":)")
sidebar <- dashboardSidebar(disable = "true",sidebarMenu(
menuItem("Dashboard", tabName = "dsh", icon = icon("list-alt"))))
projects <- fluidPage(
fluidRow(
box(
title = "Project", width = 12, solidHeader = TRUE, status = "primary",
tags$div( class = 'col-sm-6',
actionButton("back", label = "Back"), href="./www/projects"
),
tags$div( class = 'col-sm-6',
textInput("search", label = "Search")
# tags$label("Search",
#             tags$input( type="search", class= "form-control input-sm"
#            )
#)
),
tags$label("Original data set",
tags$link( "Data set 1"
)
),
tags$hr(),
tags$table( class="table table-striped table-hover dataTable", style="width:100%",
tags$tr(
tags$th("Data set"),
tags$th("Description"),
tags$th("Size"),
tags$th("Date"),
tags$th("Dimensions"),
tags$th("Instance"),
tags$th("Actions")
),
tags$tr(
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(""),
tags$td(
tags$div( class = 'btn-group',
actionButton("view", label = "View", icon = icon("eye")),
actionButton("download", label = "Download", icon = icon("download")),
actionButton("delete", label = "Delete", icon = icon("trash"))
)
)
)
)
)
)
)
body <- dashboardBody(includeCSS("custom.css"), projects)
elements <-  fluidRow(
valueBox( "New Orders","",icon = icon("list"), color = "purple")
)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
# You can access the value of the widget with input$newProject, e.g.
output$valuenewproject <- renderPrint({ input$newProject })
#datos que se muestran en la tabla
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
#para cambiar de vistas, cambio el ui dependiendo si se presiona el boton new o no
shinyApp(ui, server)
